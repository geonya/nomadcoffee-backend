// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  username       String      @unique
  email          String      @unique
  name           String
  password       String
  location       String?
  avatarUrl      String?
  githubUsername String?
  cafes          Cafe[]
  photos         CafePhoto[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  likes          Like[]
  followers      User[]      @relation("FollowRelation")
  following      User[]      @relation("FollowRelation")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String
  cafes     Cafe[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cafe {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  userId      Int
  categories  Category[]
  photos      CafePhoto[]
  description String?
  address     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  likes       Like[]
}

model CafePhoto {
  id        Int      @id @default(autoincrement())
  url       String
  cafe      Cafe     @relation(fields: [cafeId], references: [id], onDelete: Cascade)
  cafeId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  cafe      Cafe     @relation(fields: [cafeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  cafeId    Int

  @@unique([cafeId, userId])
}
